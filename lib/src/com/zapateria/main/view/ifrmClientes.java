/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zapateria.main.view;

import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Diego
 */
public class ifrmClientes extends MarcoInternoPersonalizado {

    private static final long serialVersionUID = 2258734246131279227L;

    private DefaultTableModel dtblmClientes;

    /**
     * Creates new form ifrmNomina
     */
    public ifrmClientes() {
        initComponents();
        actualizarTablaClientes();
    }

    private void llenarTablaClientes() {
        final String[] camposPermisos = {"Id", "Documento", "Nombres", "Apellidos", "Dirección", "Teléfono", "Fecha registro"};

        // Configurando los eventos de edicion de la tabla
        dtblmClientes = new DefaultTableModel(null, camposPermisos) {
            private static final long serialVersionUID = -4082996669139353200L;

            @Override
            public boolean isCellEditable(int row, int column) {
                return column > 0 && column < 6;
            }
        };
        // Llenando la tabla
        servicio.listarClientes().forEach((cliente) -> {
            dtblmClientes.addRow(cliente.toArray());
        });
        //Agregando el modelo de la tabla
        tblClientes.setModel(dtblmClientes);

        dtblmClientes.addTableModelListener((TableModelEvent e) -> {
            long id = 0;
            String documento = "", nombres = "", apellidos = "", direccion = "";
            String telefono = "";

            //Obteniendo el objeto almacenado en la celda seleccionada
            if (e.getType() == TableModelEvent.UPDATE) {
                // Capturando los datos que contiene las celdas a editar

                Object objId = tblClientes.getValueAt(e.getFirstRow(), 0);
                Object objDocumento = tblClientes.getValueAt(e.getFirstRow(), 1);
                Object objNombres = tblClientes.getValueAt(e.getFirstRow(), 2);
                Object objApellidos = tblClientes.getValueAt(e.getFirstRow(), 3);
                Object objDireccion = tblClientes.getValueAt(e.getFirstRow(), 4);
                Object objTelefono = tblClientes.getValueAt(e.getFirstRow(), 5);

                if (objDocumento == null
                        || objNombres == null
                        || objApellidos == null
                        || objDireccion == null
                        || objTelefono == null) {
                    return;
                }
                nombres = String.valueOf(objNombres);
                apellidos = String.valueOf(objApellidos);
                direccion = String.valueOf(objDireccion);

                if (String.valueOf(objDocumento).matches(REGEX_ENTERO_POSITIVO)) {
                    documento = String.valueOf(objDocumento);
                } else {
                    mostrarMensaje("Sólo se permiten números para el documento");
                    return;
                }
                if (String.valueOf(objTelefono).matches(REGEX_ENTERO_POSITIVO)) {
                    telefono = String.valueOf(objTelefono);
                } else {
                    mostrarMensaje("Sólo se permiten números para el teléfono");
                    return;
                }

                if (objId != null) {
                    id = Long.parseLong(String.valueOf(objId));

                    if (servicio.editarCliente(id, documento, nombres, apellidos, direccion, telefono)) {
                        actualizarTablaClientes();
                        mostrarMensaje("Se ha editado el cliente satisfactoriamente");
                    } else {
                        mostrarMensaje("No se pudo editar el cliente");
                    }
                } else {
                    if (!servicio.validarCedula(documento)) {
                        if (servicio.registrarCliente(documento, nombres, apellidos, direccion, telefono)) {
                            actualizarTablaClientes();
                            mostrarMensaje("Se ha registrado el cliente satisfactoriamente");
                        }
                    } else {
                        mostrarMensaje("No se pudo registrar el cliente");
                    }
                }

            }
        });

        aplicarEventosPersonalizados(tblClientes);
    }

    private void actualizarTablaClientes() {
        tblClientes.removeAll();
        dtblmClientes = null;
        llenarTablaClientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelClientes = new javax.swing.JPanel();
        spClientes = new javax.swing.JScrollPane();
        tblClientes = new TablaPersonalizada();
        btnNuevo = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setMaximumSize(new java.awt.Dimension(583, 335));
        setMinimumSize(new java.awt.Dimension(583, 335));
        setPreferredSize(new java.awt.Dimension(583, 335));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        panelClientes.setBorder(javax.swing.BorderFactory.createTitledBorder("Clientes"));

        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spClientes.setViewportView(tblClientes);

        javax.swing.GroupLayout panelClientesLayout = new javax.swing.GroupLayout(panelClientes);
        panelClientes.setLayout(panelClientesLayout);
        panelClientesLayout.setHorizontalGroup(
            panelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spClientes, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
        );
        panelClientesLayout.setVerticalGroup(
            panelClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelClientes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCerrar)
                    .addComponent(btnEliminar)
                    .addComponent(btnNuevo))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        cerrar();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int filaSeleccionada = tblClientes.getSelectedRow();

        if (filaSeleccionada < 0) {
            mostrarMensaje("Seleccione un cliente de la tabla");
            return;
        }

        if (!mostrarDecision("¿Desea eliminar este cliente?")) {
            return;
        }

        Object idObj = tblClientes.getValueAt(filaSeleccionada, 0);

        if (idObj == null) {
            dtblmClientes.removeRow(filaSeleccionada);
            return;
        }

        int id = Integer.valueOf(String.valueOf(idObj));

        if (servicio.eliminarCliente(id)) {
            actualizarTablaClientes();
            mostrarMensaje("Cliente eliminado satisfactoriamente");
        } else {
            mostrarMensaje("No se pudo eliminar el cliente");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        dtblmClientes.addRow(new Object[]{});
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        llenarTablaClientes();
    }//GEN-LAST:event_formInternalFrameOpened


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JPanel panelClientes;
    private javax.swing.JScrollPane spClientes;
    private javax.swing.JTable tblClientes;
    // End of variables declaration//GEN-END:variables
}
